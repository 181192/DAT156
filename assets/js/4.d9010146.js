(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{171:function(e,t,s){e.exports=s.p+"assets/img/commits.234db6e8.png"},175:function(e,t,s){"use strict";s.r(t);var a=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"uke-4-dypt-inn-i-skyene"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uke-4-dypt-inn-i-skyene","aria-hidden":"true"}},[e._v("#")]),e._v(" Uke 4 - Dypt inn i skyene")]),e._v(" "),a("h2",{attrs:{id:"tirsdag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tirsdag","aria-hidden":"true"}},[e._v("#")]),e._v(" Tirsdag")]),e._v(" "),a("p",[e._v("Jobbet i dag med Azure Artifacts og Bitbucket Pipelines. Planen er å få deployet noen av kjerne bibliotekene vi bruker mest opp i Azure Artifacts. Jeg har pekt meg ut to biblioteker (en for backend og den andre for frontend) og en "),a("em",[a("code",[e._v("parent pom.xml")])]),e._v(" som holder kontroll over versjonene av fleste Maven dependencies som er felles for mange av modulene.")]),e._v(" "),a("p",[e._v("Jeg begynte med å sette opp en "),a("em",[e._v("Feed")]),e._v(" som det er kalt i Azure Artifacts. Denne "),a("em",[e._v("feed'en")]),e._v(" kan man hente og publisere Maven artefaktene til. Det som kreves er at man definerer "),a("code",[e._v("<servers>")]),e._v(" i "),a("code",[e._v("settings.xml")]),e._v(" filen til Maven på maskinen, slik at Maven vil hente fra Azure Artifacts først og ha fallback til Maven Central Repo. Deretter definerer man en repository inni "),a("code",[e._v("<repositories>")]),e._v(" og "),a("code",[e._v("<distributionManagment>")]),e._v(" taggene i "),a("code",[e._v("pom.xml")]),e._v(" i prosjeket som skal benytte seg av artefaktene.")]),e._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("repository")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("dev-azure-com-${company}-${feed}"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("https://pkgs.dev.azure.com/${company}/_packaging/${feed}/maven/v1"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("releases")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("true"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("releases")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("snapshots")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("true"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("snapshots")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("repository")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])]),a("p",[e._v("Deretter begynte jeg med "),a("em",[e._v("Parent pom")]),e._v(" prosjektet å sette opp Bitbucket Pipeline. Det viste seg å være mye problemer med å få Maven Release plugin til å fungere ordentlig. Slik Maven Release plugin fungerer bygger den prosjeket, laster opp en RELEASE artefakt til Azure Artifacs, commiter en ny versjon i "),a("code",[e._v("pom.xml")]),e._v(" og tagger commiten med samme versjonsnummer. Deretter commiter den engang til for å sette versjonen i "),a("code",[e._v("pom.xml")]),e._v(" til en SNAPSHOT release. Når jeg først satte igang fikk jeg ikke Maven Release plugin til å commite, den feilet gang på gang.")]),e._v(" "),a("div",{staticClass:"danger custom-block"},[a("p",{staticClass:"custom-block-title"},[e._v("Det var flere grunner til at det ikke fungerte")]),e._v(" "),a("ol",[a("li",[e._v("Bitbucket bruker en spesial SSH url for Bitbucket Pipelines som må settes med en miljø variabel.")]),e._v(" "),a("li",[e._v("Maven Release plugin bruker "),a("code",[e._v("git status --porcelain")]),e._v(" til å sjekke status. Den feiler å lese output dersom miljø variabelen "),a("code",[e._v("LANG")]),e._v(" på maskinen ikke er satt til "),a("code",[e._v("en_US.UTF-8")])]),e._v(" "),a("li",[e._v("Maven kjører i docker, og er satt opp til at "),a("code",[e._v("settings.xml")]),e._v(" filen må hete "),a("code",[e._v("settings-docker.xml")]),e._v(" og ligge på "),a("code",[e._v("/usr/share/maven/ref/settings-docker.xml")]),e._v(".")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("LANG"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'en_US.UTF-8'")]),e._v(" mvn -B \\\n  -s /usr/share/maven/ref/settings-docker.xml \\\n  release:clean \\\n  release:prepare \\\n  release:perform \\\n  -Dbitbucket.url"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${BITBUCKET_GIT_SSH_ORIGIN}")]),e._v("\n")])])])]),e._v(" "),a("p",[e._v("Slik ser git loggen ut etter en release:\n"),a("img",{attrs:{src:s(171),alt:"commits"}})]),e._v(" "),a("h2",{attrs:{id:"mandag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mandag","aria-hidden":"true"}},[e._v("#")]),e._v(" Mandag")]),e._v(" "),a("p",[e._v("I dag har jeg jobbet videre med å få koblet sammen applikasjonen som kjører i Kubernetes klusteret og Prometheus. Utfordringen var å få self-discovery funksjonaliteten til Prometheus til å "),a("em",[e._v("scrape")]),e._v(" applikasjonen vår på "),a("code",[e._v("<url>:8090/metrics")]),e._v(". Dette er viktig å få til at den blir automatisk oppdaget, på grunn av når man kjører applikasjoner i Kubernetes, kommer det til å bli laget og fjernet kontainerer dynamisk ettersom Kubernetes klusteret skalerer etter behov. Da blir det umulig å statisk konfigurere dette.")]),e._v(" "),a("p",[e._v("Jeg fikk sammen med en kollega Prometheus til å fungere, da brukte jeg litt tid på å konfigurere ett par visualiseringer i Grafana. Prometheus har sitt eget spørrespråk for å hente ut data, så her er det en del å sette seg inn i.")]),e._v(" "),a("p",[e._v("Jeg begynte også å plukke opp tråden fra forrige uke med Azure Artifacts, vi er nødt til å fjerne oss med Nexus Repository hvor vi nå lagrer artifacts som bibliotek "),a("code",[e._v("jar")]),e._v(" filer og "),a("code",[e._v("pom.xml")]),e._v(". Fordi Nexus serveren kjøres på intern nettverket vårt, og vi ønsker ikke å åpne det opp. Når Azure Artifacts er oppe og kjører kan vi snart teste med flere moduler i klusteret.")]),e._v(" "),a("p",[e._v("For å kunne benytte seg av Azure Artifacts med Maven må det settes opp en "),a("code",[e._v("settings.xml")]),e._v(" fil med autentisering mot selve repositoryet. Jeg vurderer å lage et docker image for å sette opp all konfigurasjonen, det samme som jeg gjorde med Azure- "),a("code",[e._v("kubectl")]),e._v("-og-Helm docker imaget. Da tar det mindre til å sette opp flere pipelines i bitbucket.")])])}],n=s(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},a,!1,null,null,null);r.options.__file="README.md";t.default=r.exports}}]);